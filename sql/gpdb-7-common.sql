-- 1. Tests for pre-generated relation files

-- b-tree index
\! pg_filedump test/index_btree.gp7

-- bitmap index
\! pg_filedump -i -B test/index_bitmap.gp7

-- create table <name> (c1 int, c2 text)
\! pg_filedump test/heap.gp7
\! pg_filedump -d test/heap.gp7
\! pg_filedump -D int,text test/heap.gp7

-- create table <name> (c1 int, c2 text)
--   with (appendonly=true)
\! pg_filedump -z -M test/ao.gp7
\! pg_filedump -z -M -T none test/ao.gp7
\! pg_filedump -z -M -O row test/ao.gp7
\! pg_filedump -z -M -k test/ao.gp7

-- create table <name> (c1 int, c2 text)
--   with (appendonly=true, checksum=false)
\! pg_filedump -z test/ao.nochecksum.gp7

-- create table <name> (c1 int, c2 text)
--   with (appendonly=true, orientation=column)
\! pg_filedump -z -M -k -O column test/co.gp7

-- create table <name> (c1 int, c2 text)
--   with (appendonly=true, orientation=column, checksum=false)
\! pg_filedump -z -O column test/co.nochecksum.gp7

-- 2. Tests for new relations files generated by the running GPDB server


-- P.S. we are not putting start_matchsubs/end_matchsubs here to filter the 
-- output of pg_filedump. Instead we are doing it in run_test.sql because the 
-- output only varies for a newly-created table, not for the existing table 
-- files under test/. 

-- b-tree index
create table t1_bt(c1 int, c2 text) distributed replicated;
create index t1_bt_idx on t1_bt using btree(c1);
insert into t1_bt select i,'abc' from generate_series(1,10)i;
\set relname t1_bt_idx
\set ext ''
\setenv opt ''
\ir run_test.sql

-- bitmap index
create table t1_bm(c1 int, c2 text) distributed replicated;
create index t1_bm_idx on t1_bm using bitmap(c1);
insert into t1_bm select 0,'abc' from generate_series(1,10)i;
insert into t1_bm select 1,'abc' from generate_series(1,10)i;
\set relname t1_bm_idx
\set ext ''
\setenv opt '-i -B'
\ir run_test.sql

-- heap table
create table heap(c1 int, c2 text) distributed replicated;
insert into heap select i,'abc' from generate_series(1,10)i;
\set relname heap
\set ext ''
\setenv opt ''
\ir run_test.sql
-- with column types
\setenv opt '-D int,text'
\ir run_test.sql

-- AO table
create table ao(c1 int, c2 text) with (appendonly=true) distributed replicated;
insert into ao select i,'abc' from generate_series(1,10)i;
\set relname ao
\set ext '.1'
-- indicate AO table and consider checksum
\setenv opt '-z -M'
\ir run_test.sql
-- indicate no compression
\setenv opt '-z -M -T none'
\ir run_test.sql
-- indicate row-oriented
\setenv opt '-z -M -O row'
\ir run_test.sql
-- verify checksum
\setenv opt '-z -M -k'
\ir run_test.sql

-- AO table w/o checksum
create table ao_nochecksum(c1 int, c2 text) with (appendonly=true, checksum=false) distributed replicated;
insert into ao_nochecksum select i,'abc' from generate_series(1,10)i;
\set relname ao_nochecksum
\set ext '.1'
\setenv opt '-z'
\ir run_test.sql

-- CO table
create table co(c1 int, c2 text) with (appendonly=true, orientation=column) distributed replicated;
insert into co select i,'abc' from generate_series(1,10)i;
\set relname co
\set ext '.1'
-- indicate AO table and consider checksum
\setenv opt '-z -M -k -O column'
\ir run_test.sql

-- CO table w/o checksum
create table co_nochecksum (c1 int, c2 text) with (appendonly=true, orientation=column, checksum=false) distributed replicated;
insert into co_nochecksum select i,'abc' from generate_series(1,10)i;
\set relname co_nochecksum
\set ext '.1'
\setenv opt '-z -O column'
\ir run_test.sql
